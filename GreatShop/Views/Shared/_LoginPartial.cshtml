@using Microsoft.AspNetCore.Identity

@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        //If the user is in Admin role then allow product page to update/change/add/remove
        if (User.IsInRole(WebConstants.AdminRole))
        {

            <li class="nav-item">
                <a class="nav-link text-white" asp-area="" asp-controller="Product" asp-action="AdminIndex">All Products</a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-white" asp-area="" asp-controller="Category" asp-action="Index">Categories</a>
            </li>
        }


        <li class="nav-item">
            <a id="manage" class="nav-link text-white-50" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">@UserManager.GetUserName(User) </a>

        </li>
        <li class="nav-item">
            <form id="logoutForm" class="form-row" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                <button id="logout" type="submit" class="nav-link btn btn-link text-white">Logout</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-white" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-white" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>
